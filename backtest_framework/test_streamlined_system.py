#!/usr/bin/env python3
"""
Test script to verify the streamlined dynamic indicator visualization system.
"""
import os
import sys

# Add current directory and parent to path for imports
current_dir = os.path.dirname(os.path.abspath(__file__))
scripts_dir = os.path.dirname(current_dir)
sys.path.append(scripts_dir)

print("Testing Streamlined Dynamic Indicator System")
print("=" * 50)

try:
    # Test core imports
    print("1. Testing core imports...")
    from backtest_framework.core.visualization.plotter import Plotter
    print("   âœ“ Plotter import successful (old IndicatorPlots removed)")
    
    from backtest_framework.core.visualization.components.dynamic_indicators import DynamicIndicatorCoordinator
    print("   âœ“ DynamicIndicatorCoordinator import successful")
    
    # Test indicator components
    print("\n2. Testing indicator components...")
    from backtest_framework.core.visualization.components.indicator_components import MonthlyKDJ, SMA
    print("   âœ“ MonthlyKDJ import successful")
    print("   âœ“ SMA import successful")
    
    # Test registry functionality
    print("\n3. Testing indicator registry...")
    from backtest_framework.core.indicators.registry import IndicatorRegistry
    
    all_indicators = IndicatorRegistry.list_all()
    print(f"   âœ“ Total registered indicators: {len(all_indicators)}")
    
    # Check specific indicators
    if "MONTHLY_KDJ" in all_indicators:
        monthly_kdj_info = IndicatorRegistry.get("MONTHLY_KDJ")
        viz_class = monthly_kdj_info.get('visualization_class')
        print(f"   âœ“ MONTHLY_KDJ visualization class: {viz_class}")
    
    if "SMA" in all_indicators:
        sma_info = IndicatorRegistry.get("SMA")
        viz_class = sma_info.get('visualization_class')
        print(f"   âœ“ SMA visualization class: {viz_class}")
    
    # Test dynamic coordinator
    print("\n4. Testing dynamic coordinator...")
    import pandas as pd
    
    # Create test data with both indicators
    test_data = pd.DataFrame({
        'monthly_k': [30, 40, 50],
        'monthly_d': [25, 35, 45], 
        'monthly_j': [35, 45, 55],
        'SMA': [100, 105, 110],
        'Close': [100, 105, 110]
    })
    
    coordinator = DynamicIndicatorCoordinator(test_data)
    
    computed_indicators = coordinator.get_computed_indicators()
    print(f"   âœ“ Computed indicators: {computed_indicators}")
    
    available_viz = coordinator.get_available_visualizations()
    print(f"   âœ“ Available visualizations: {available_viz}")
    
    debug_info = coordinator.get_debug_info()
    print(f"   âœ“ Visualization registry: {debug_info['visualization_registry']}")
    
    # Test panel separation
    print("\n5. Testing panel separation...")
    
    # Test that we can separate price vs indicator panel visualizations
    import plotly.graph_objects as go
    from plotly.subplots import make_subplots
    
    fig = make_subplots(rows=2, cols=1)
    
    # Test price panel indicators (SMA should go here)
    fig, price_success = coordinator.apply_price_panel_indicators(fig, row=1, col=1)
    print(f"   âœ“ Price panel indicators applied: {price_success}")
    
    # Test indicator panel indicators (KDJ should go here)  
    fig, indicator_success = coordinator.apply_indicator_panel_indicators(fig, row=2, col=1)
    print(f"   âœ“ Indicator panel indicators applied: {indicator_success}")
    
    print("\nðŸŽ‰ All tests passed!")
    print("\nStreamlined System Features:")
    print("âœ… Old static IndicatorPlots removed")
    print("âœ… Dynamic indicator detection working")
    print("âœ… Modular indicator components working")
    print("âœ… Panel separation (price vs indicator) working")
    print("âœ… SMA and Monthly KDJ visualizations registered")
    print("âœ… Runner scripts updated with dynamic demos")
    
    print("\nYou can now run:")
    print("  python kdj_monthly_demo_simplified.py")
    print("  python kdj_mfi_early_detection_demo.py")
    
except Exception as e:
    print(f"âœ— Error: {e}")
    import traceback
    traceback.print_exc()
